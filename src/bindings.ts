
// This file was generated by [tauri-specta](https://github.com/oscartbeaumont/tauri-specta). Do not edit this file manually.

/** user-defined commands **/


export const commands = {
async openLoginWindow(host: string) : Promise<Result<null, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("open_login_window", { host }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async getUserCourses() : Promise<Result<Course[], string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("get_user_courses") };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async getCourse(courseId: number) : Promise<Result<CourseWithSections, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("get_course", { courseId }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async getModuleContent(courseId: number, moduleId: number) : Promise<Result<[SectionModule, ModuleContent[]], string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("get_module_content", { courseId, moduleId }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async getContentBlobs(courseId: number, moduleId: number) : Promise<Result<ContentBlob[], string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("get_content_blobs", { courseId, moduleId }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
}
}

/** user-defined events **/


export const events = __makeEvents__<{
moodleAuthEvent: MoodleAuthEvent
}>({
moodleAuthEvent: "moodle-auth-event"
})

/** user-defined constants **/

export const SUPPORTED_EMBED_TYPES = ["application/pdf"] as const;
export const SUPPORTED_MODULE_TYPES = ["page","book","resource","url"] as const;

/** user-defined types **/

export type AuthStatus = "Failed" | "Success" | "Aborted" | "Pending"
export type ContentBlob = { name: string; moduleId: number; updatedAt: bigint; mimeType: string; path: string }
export type Course = { id: number; name: string; moduleCount: number; colour: string | null; icon: string | null }
export type CourseSection = { id: number; courseId: number; name: string }
export type CourseSectionWithModules = { section: CourseSection; modules: SectionModule[] }
export type CourseWithSections = { course: Course; sections: CourseSectionWithModules[] }
export type ModuleContent = { id: number; moduleId: number; updatedAt: bigint; rank: number; content: string }
export type MoodleAuthEvent = AuthStatus
export type SectionModule = { id: number; sectionId: number; name: string; updatedAt: bigint; moduleType: SectionModuleType }
export type SectionModuleType = "page" | "book" | "forum" | "resource" | "url" | "Unknown"

/** tauri-specta globals **/

import {
	invoke as TAURI_INVOKE,
} from "@tauri-apps/api/core";
import * as TAURI_API_EVENT from "@tauri-apps/api/event";
import type { WebviewWindow as __WebviewWindow__ } from "@tauri-apps/api/webviewWindow";

type __EventObj__<T> = {
	listen: (
		cb: TAURI_API_EVENT.EventCallback<T>,
	) => ReturnType<typeof TAURI_API_EVENT.listen<T>>;
	once: (
		cb: TAURI_API_EVENT.EventCallback<T>,
	) => ReturnType<typeof TAURI_API_EVENT.once<T>>;
	emit: null extends T
		? (payload?: T) => ReturnType<typeof TAURI_API_EVENT.emit>
		: (payload: T) => ReturnType<typeof TAURI_API_EVENT.emit>;
};

export type Result<T, E> =
	| { status: "ok"; data: T }
	| { status: "error"; error: E };

function __makeEvents__<T extends Record<string, any>>(
	mappings: Record<keyof T, string>,
) {
	return new Proxy(
		{} as unknown as {
			[K in keyof T]: __EventObj__<T[K]> & ((handle: __WebviewWindow__) => __EventObj__<T[K]>);
		},
		{
			get: (_, event) => {
				const name = mappings[event as keyof T];

				return new Proxy((() => {}) as any, {
					apply: (_, __, [window]: [__WebviewWindow__]) => ({
						listen: (arg: any) => window.listen(name, arg),
						once: (arg: any) => window.once(name, arg),
						emit: (arg: any) => window.emit(name, arg),
					}),
					get: (_, command: keyof __EventObj__<any>) => {
						switch (command) {
							case "listen":
								return (arg: any) => TAURI_API_EVENT.listen(name, arg);
							case "once":
								return (arg: any) => TAURI_API_EVENT.once(name, arg);
							case "emit":
								return (arg: any) => TAURI_API_EVENT.emit(name, arg);
						}
					},
				});
			},
		},
	);
}
